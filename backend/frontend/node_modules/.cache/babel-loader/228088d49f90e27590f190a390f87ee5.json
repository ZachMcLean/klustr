{"ast":null,"code":"var _jsxFileName = \"/home/zach/code/test/klustr/frontend/src/pages/NotePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/chevron-left.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotePage = _ref => {\n  _s();\n  let {\n    match,\n    history\n  } = _ref;\n  let noteId = match.params.id;\n  let [note, setNote] = useState(null);\n  useEffect(() => {\n    getNote();\n  }, [noteId]);\n  let getNote = async () => {\n    let response = await fetch(`/api/notes/${noteId}/`);\n    let data = await response.json();\n    console.log('change');\n    setNote(data);\n  };\n  let updateNote = async () => {\n    fetch(`/api/notes/${noteId}/update/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n  };\n  let deleteNote = async () => {\n    fetch(`/api/notes/${notesId}/delete/`, {\n      method: 'DELETE',\n      'headers': {\n        'Content-Type': 'application/json'\n      }\n    });\n  };\n  let createNote = async () => {\n    fetch(`/api/notes/${noteId}/create/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    });\n  };\n  let handleSubmit = () => {\n    if (noteId !== 'new' && !note.body) {\n      deleteNote();\n    } else if (noteId != 'new') {\n      updateNote();\n    } else if (noteId !== 'new' && !note.body) {\n      createNote();\n    }\n    history.push('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({\n          ...note,\n          'body': e.target.value\n        });\n      },\n      defaultValue: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(NotePage, \"k41NuHLtMLNqVoRGkWqAFGkbS8Y=\");\n_c = NotePage;\nexport default NotePage;\nvar _c;\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","ReactComponent","ArrowLeft","NotePage","match","history","noteId","params","id","note","setNote","getNote","response","fetch","data","json","console","log","updateNote","method","headers","body","JSON","stringify","deleteNote","notesId","createNote","handleSubmit","push","e","target","value"],"sources":["/home/zach/code/test/klustr/frontend/src/pages/NotePage.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { ReactComponent as ArrowLeft } from '../assets/chevron-left.svg'\n\nconst NotePage = ({ match, history }) => {\n\n  let noteId = match.params.id\n  let [note, setNote] = useState(null)\n\n\n  useEffect(() => {\n    getNote()\n  }, [noteId])\n\n  let getNote = async () => {\n    let response = await fetch(`/api/notes/${noteId}/`)\n    let data = await response.json()\n    console.log('change')\n    setNote(data)\n  }\n\n  let updateNote = async () => {\n    fetch(`/api/notes/${noteId}/update/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    })\n  }\n\n  let deleteNote = async () => {\n    fetch(`/api/notes/${notesId}/delete/`, {\n    method: 'DELETE', \n    'headers' : {\n      'Content-Type': 'application/json'\n    }\n  })\n}\n\n  let createNote = async () => {\n    fetch(`/api/notes/${noteId}/create/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    })\n  }\n  \n  let handleSubmit = () => {\n    if (noteId !== 'new' && !note.body) {\n      deleteNote()\n    } else if(noteId != 'new') {\n      updateNote()\n    } else if(noteId !== 'new' && !note.body) {\n      createNote()\n    }\n    history.push('/')\n  }\n\n\n  return (\n    <div className='note'>\n      <div className='note-header'>\n        <h3>\n            <ArrowLeft onClick={handleSubmit}/>\n        </h3>\n        <button onClick={deleteNote}>Delete</button>\n      </div>\n      <textarea onChange={(e) => {setNote({...note, 'body': e.target.value}) }} defaultValue={note?.body}></textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}